{"version":3,"sources":["index.js"],"names":["cx","require","_","xmlbuilder","he","cell","value","leftWall","topWall","App","initialGrid","numberGrid","Array","w","fill","initialWords","makeWordsFromGrid","initialClues","across","down","aClues","map","word","address","number","clue","isAcross","dClues","concat","makeClueList","useState","grid","setGrid","active","setActive","words","setWords","clueList","setClueList","title","creator","meta","setMeta","handleMetaInput","newMeta","disableJpz","x","includes","y","length","className","Grid","cells","onClick","i","handleClick","onInput","val","ngrid","slice","toUpperCase","handleInput","h","nWords","stripClueList","markLeftWall","disabled","type","markTopWall","MetaInput","onMetaInput","WordList","onClueInput","newClue","nClueList","remove","handleClueInput","href","btoa","clues","xmlObj","metadata","encode","decimal","crossword","makeGridXml","makeWordXml","makeClueXml","create","noDoubleEncoding","end","makeJPZ","download","Explainer","tabIndex","id","data-bs-backdrop","data-bs-scroll","data-bs-dismiss","aria-label","props","rows","chunk","row","j","nx","Cell","onFocus","useFocus","inputRef","setInputFocus","maxLength","e","target","ref","WordItem","placeholder","n","self","index","Math","floor","north","south","west","east","undefined","acrossWords","downWords","cols","zip","rowWords","c","push","takeWhile","col","colWords","filter","makeWordsFromCells","sortBy","join","validAddresses","htmlElRef","useRef","current","focus","b","aClue","span","dClue","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8e548675.chunk.js","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React, {useState, useRef} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nconst cx = require('classnames');\nconst _ = require('lodash');\nconst xmlbuilder = require('xmlbuilder');\nconst he = require('he');\n\nconst w = 8;\nconst h = 10;\nconst cell = {\n  value: '',\n  leftWall: false,\n  topWall: false,\n}\n\nconst App = () => {\n  const initialGrid = numberGrid(Array(w * h).fill(cell));\n  const initialActive = null;\n  const initialWords = makeWordsFromGrid(initialGrid);\n  const initialClues = makeClueList(initialWords);\n\n  const [grid, setGrid] = useState(initialGrid);\n  const [active, setActive] = useState(initialActive);\n  const [words, setWords] = useState(initialWords);\n  const [clueList, setClueList] = useState(initialClues);\n  const [meta, setMeta] = useState({title: '', creator: ''});\n\n  const handleClick = (i) => {\n    setActive(i);\n  }\n\n  const handleInput = (active, val, grid) => {\n    const ngrid = grid.slice();\n    ngrid[active] = { ...ngrid[active], value: val.toUpperCase() };\n    setGrid(numberGrid(ngrid));\n    setWords(makeWordsFromGrid(ngrid));\n    if (val.length === 1) {\n      setActive(active+1);\n    }\n  }\n  \n  const markTopWall = (active, grid) => {\n    const ngrid = grid.slice();\n    ngrid[active] = {...ngrid[active], topWall: !ngrid[active].topWall};\n    setGrid(numberGrid(ngrid));\n    const nWords = makeWordsFromGrid(ngrid);\n    setWords(nWords);\n    setClueList(stripClueList(clueList, nWords));\n  }\n  \n  const markLeftWall = (active, grid) => {\n    const ngrid = grid.slice();\n    ngrid[active] = {...ngrid[active], leftWall: !ngrid[active].leftWall};\n    setGrid(numberGrid(ngrid));\n    const nWords = makeWordsFromGrid(ngrid);\n    setWords(nWords);\n    setClueList(stripClueList(clueList, nWords));\n  }\n\n  const handleClueInput = (newClue, clueList) => {\n    setActive(null);\n    const nClueList = clueList.slice();\n    _.remove(nClueList, ['address', newClue.address]);\n    setClueList([...nClueList, newClue]);\n  }\n\n  const handleMetaInput = (newMeta) => {\n    setActive(null);\n    setMeta({...meta, ...newMeta});\n  }\n  \n  const disableJpz = () => {\n    return (clueList.map(x => x.clue).includes('') || grid.map(y => y.value).includes('')) \n      || !(clueList.length === words.across.length + words.down.length);\n    // return true;\n  }\n\n  const jpzHref = () => {\n    if (!disableJpz()) {\n      return `data:${'application/xml'};base64,${btoa(makeJPZ(grid, words, clueList, meta))}`\n      // return `data:${'application/xml'},${encodeURI(mazkeJPZ(grid, words, clueList, meta))}`\n    } else {\n      return '';\n    }\n  }\n\n  return (\n    <>\n      <div className={cx('container-fluid')}>\n        <div className={cx('row')}>\n          <div className={cx('col-5')}>\n            <div className={cx('d-flex', 'justify-content-center', 'sticky-top')}>\n              <div className={cx('py-4')}>\n                <Grid \n                  cells={grid} \n                  active={active}\n                  onClick={i => handleClick(i)} \n                  onInput={(i, val) => handleInput(i, val, grid)} \n                  w={w} h={h}\n                />\n                <div className={cx('mt-3')}>\n                  <button \n                    onClick={() => markLeftWall(active, grid, clueList)} \n                    disabled={active % w === 0}\n                    type='button'\n                    className={cx('btn', 'btn-secondary', 'me-2')}\n                  >\n                    Toggle Left Wall\n                  </button>\n                  <button \n                    onClick={() => markTopWall(active, grid, clueList)} \n                    disabled={!(active >= w)}\n                    type='button'\n                    className={cx('btn', 'btn-secondary')}\n                  >\n                    Toggle Top Wall\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div \n            className={cx('col-7', 'row', 'gy-4', 'mb-5')}\n          >\n            <MetaInput onMetaInput={(meta) => handleMetaInput(meta)}/> \n            <WordList {...words} \n              onClueInput={(clue) => handleClueInput(clue, clueList)}\n            />\n            <a \n              className='d-grid'\n              href={jpzHref()}\n              download={`${meta.title}.jpz`}\n            >\n              <button \n              disabled={disableJpz()}\n              className={cx('btn', 'btn-lg', 'btn-primary')}\n                // onClick={console.log(JSON.stringify({ grid, words, clueList, meta}))}\n              >Download JPZ</button>\n            </a>\n          </div>\n        </div>\n      </div>\n      <Explainer/>\n    </>\n  )\n}\n\nconst Explainer = () => {\n  return (\n    <div \n      className={cx('offcanvas', 'offcanvas-bottom', 'show')}\n      tabIndex=\"-1\" \n      id=\"offcanvas\" \n      // aria-labelledby=\"offcanvasLabel\" \n      data-bs-backdrop=\"true\" \n      data-bs-scroll=\"true\"\n    >\n      <div className={cx('p-3')}>\n        <div className=\"offcanvas-header\">\n          <h3 className=\"offcanvas-title\" id=\"offcanvasLabel\">\n            TNY-Style Cryptic Crossword JPZ Generator\n          </h3>\n          <button \n            type=\"button\" \n            className=\"btn-close text-reset\" \n            data-bs-dismiss=\"offcanvas\" \n            aria-label=\"Close\" \n          />\n        </div>\n        <div className=\"offcanvas-body\">\n          <p><b>How to use:</b></p>\n          <ol>\n            <li>Add letters and walls to the grid.</li>\n            <li>Add a clue for each word. (Don’t forget to use smart quotes and include enumerations!)</li>\n            <li>Download your JPZ file!</li>\n          </ol>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst Grid = (props) => {\n  // const nCells = numberGrid(props.cells);\n  const rows = _.chunk(props.cells, props.w);\n  return (\n    <div className='grid'>\n      {\n        rows.map((row, i) => {\n          return (\n            <div className='grid-row'>\n              {\n                row.map((cell, j) => {\n                  const nx = i * w + j;\n                  return <Cell \n                    key = {nx} \n                    active = {props.active === nx}\n                    onClick = {() => props.onClick(nx)} \n                    onFocus = {() => props.onClick(nx)}\n                    onInput = {(value) => props.onInput(nx, value)}\n                    {...cell}\n                  />\n                })\n              } \n            </div>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nconst Cell = (props) => {\n  const [inputRef, setInputFocus] = useFocus();\n  if (props.active) {setInputFocus();}\n  return (\n    <div\n      className={cx(\n        'cell',\n        props.active ? 'active' : null,\n        props.leftWall ? 'leftWall' : null, \n        props.topWall ? 'topWall' : null, \n      )}\n      onClick={() => {props.onClick(); setInputFocus();}}\n    >\n      <div className={cx('number')}>{props.number}</div>\n      <input \n        className={cx('value')}\n        type='text'\n        maxLength='1'\n        onInput={e => props.onInput(e.target.value)}\n        onFocus={props.onFocus}\n        ref={inputRef}\n      />\n    </div>\n  )\n}\n\nconst WordList = (props) => {\n  return (\n    <div className={cx()}>\n      <div className={cx('mb-4')}>\n        <h3 className={cx('mb-3')}>Across</h3>\n        {\n          props.across.map(word => {\n            return (\n              <WordItem {...word} \n                onClueInput={(value) => props.onClueInput({\n                  clue: value, \n                  address: `${word.number}A`,\n                  number: word.number,\n                  isAcross: true\n                })} \n              />\n            )\n          })\n        }\n      </div>\n      <div className={cx('mb-4')}>\n        <h3 className={cx('mb-3')}>Down</h3>\n        {\n          props.down.map(word => {\n            return (\n              <WordItem {...word} \n                onClueInput={(value) => props.onClueInput({\n                  clue: value, \n                  address: `${word.number}D`,\n                  number: word.number,\n                  isAcross: false\n                })} \n              />\n            )\n          })\n        }\n      </div>\n      <div><i>{props.across.length + props.down.length} words</i></div> \n    </div>\n  )\n}\n\nconst MetaInput = (props) => {\n  return (\n    <>\n      <div className={cx('row', 'mb-2')}>\n        <div className={cx('col-6')}>\n          <input\n            type=\"text\"\n            placeholder=\"Title\"\n            className={cx('form-control', 'form-control-lg')}\n            onInput={e => props.onMetaInput({title: e.target.value})}\n          />\n        </div>\n      </div>\n      <div className={cx('row')}>\n        <div className={cx('col-4')}>\n          <input\n            type=\"text\"\n            placeholder=\"Creator\"\n            className={cx('form-control')}\n            onInput={e => props.onMetaInput({creator: e.target.value})}\n          />\n        </div>\n      </div>\n    </>\n  )\n}\n\nconst WordItem = (props) => {\n  return (\n    <div className={cx('row', 'mb-1')}>\n      <div className={cx('wi-number')}>{props.number}</div>\n      <div className={cx('col')}>{props.word}</div>\n      <div className={cx('col-9')}>\n        <input \n          type=\"text\" \n          placeholder={`Clue (${props.word.length})`}\n          className={cx('form-control')}\n          onInput={e => props.onClueInput(e.target.value)}\n        />\n      </div>\n    </div>\n  )\n}\n\nfunction numberGrid(grid) {\n  let n = 1;\n  for (let i=0; i < grid.length; i++) {\n    const self = grid[i];\n\n    self.index = i; \n    self.x = (i % w) + 1;\n    self.y = Math.floor(i / w) + 1;\n\n    const north = i < w          ? null : grid[i - w];\n    const south = i > (w * h-1)  ? null : grid[i + w];\n    const west = (i % w === 0)   ? null : grid[i-1];\n    const east = (i % w === w-1) ? null : grid[i+1];\n    // number the down words first\n    if ((self.topWall && south && !south.topWall) || (!north && !south.topWall)) {\n      grid[i] = { ...grid[i], number: n};\n      n++;\n    } else if ((self.leftWall && east && !east.leftWall) || (!west && !east.leftWall)) {\n      grid[i] = { ...grid[i], number: n };\n      n++;\n    } else {\n      grid[i] = { ...grid[i], number: undefined};\n    }\n  }\n  return grid;\n}\n\nfunction makeWordsFromGrid(grid) {\n  const acrossWords = [];\n  const downWords = [];\n  const rows = _.chunk(grid, w);\n  const cols = _.zip(...rows);\n  for (let row of rows) {\n    const rowWords = [];\n    for (let c = 0; c < row.length; c++) {\n      const cell = row[c];\n      if (cell.leftWall || c === 0) {\n        const word = [];\n        word.push(cell, ..._.takeWhile(row.slice(c + 1), ['leftWall', false]));\n        rowWords.push(word);\n      }\n    }\n    acrossWords.push(...rowWords);\n  }\n  for (let col of cols) {\n    const colWords = [];\n    for (let c = 0; c < col.length; c++) {\n      const cell = col[c];\n      if (cell.topWall || c === 0) {\n        const word = [];\n        word.push(cell, ..._.takeWhile(col.slice(c + 1), ['topWall', false]));\n        colWords.push(word);\n      }\n    }\n    downWords.push(...colWords);\n  }\n  return {\n    across: acrossWords\n      .filter(word => word.length > 1)\n      .map(word => makeWordsFromCells(word)),\n    down: _.sortBy(downWords\n      .filter(word => word.length > 1)\n      .map(word => makeWordsFromCells(word)),\n      ['number']\n    )\n  }\n}\n\nfunction makeWordsFromCells(cells) {\n  return {\n    number: cells[0].number || '-',\n    word: cells.map(cell => cell.value ? cell.value : '_').join(''),\n    cells: cells.map(({x, y}) => ({x, y}))\n  }\n}\n\nfunction makeClueList({across, down}) {\n  const aClues = across.map(word => {\n    return {\n      address: `${word.number}A`, \n      clue: '',\n      number: word.number,\n      isAcross: true\n    }\n  });\n  const dClues = down.map(word => {\n    return {\n      address: `${word.number}D`,\n      clue: '',\n      number: word.number,\n      isAcross: false\n    }\n  });\n  return _.concat(aClues, dClues);\n}\n\nfunction stripClueList(clueList, {across, down}) {\n  const validAddresses = _.concat(\n    across.map(word => (`${word.number}A`)),\n    down.map(word => (`${word.number}D`))\n  )\n  return clueList.filter(({address}) => validAddresses.includes(address));\n}\n\nconst useFocus = () => {\n  const htmlElRef = useRef(null)\n  const setFocus = () => { htmlElRef.current && htmlElRef.current.focus() }\n\n  return [htmlElRef, setFocus]\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n\n// make JPZ xml\n\nfunction makeJPZ(grid, words, clues, meta) {\n  const xmlObj = {\n    'crossword-compiler-applet': {\n      'rectangular-puzzle': {\n        metadata: {\n          title: he.encode(meta.title, {decimal: true}),\n          creator: he.encode(meta.creator, {decimal: true})\n        },\n        crossword: {\n          grid: makeGridXml(grid),\n          word: makeWordXml(words),\n          clues: makeClueXml(clues)\n        }\n      }\n    }\n  }\n\n  //\n  const jpz = xmlbuilder.create(xmlObj, {noDoubleEncoding: true});\n  return jpz.end();\n}\n\nfunction makeGridXml(grid) {\n  const gridObj = {\n    '@height': `${h}`,\n    '@width': `${w}`,\n    '@one-letter-words': 'false',\n    'grid-look': { \n      '@numbering-scheme': 'normal',\n      '@thick-border': 'true'\n    },\n    cell: grid.map((cell, index) => {\n      return {\n        '@x': `${cell.x}`,\n        '@y': `${cell.y}`,\n        '@solution': cell.value,\n        '@number': cell.number,\n        '@left-bar': cell.leftWall ? 'true' : undefined,\n        '@top-bar': cell.topWall ? 'true' : undefined,\n      }\n    })\n  }\n\n  return gridObj;\n}\n\nfunction makeWordXml(words) {\n  const allWords = [...words.across, ...words.down];\n  const wordObj = allWords.map((word, id) => {\n    return {\n      '@id': `${id + 1}`,\n      cells: word.cells.map(cell => {\n        return {\n          '@x': `${cell.x}`,\n          '@y': `${cell.y}`\n        }\n      })\n    }\n  });\n  return wordObj;\n}\n\n\nfunction makeClueXml(clues) {\n  const aClues = _.sortBy(_.filter(clues, 'isAcross'), 'number');\n  const dClues = _.sortBy(_.filter(clues, ['isAcross', false]), 'number');\n  const cluesObj = [\n    {\n      title: {\n        b: 'Across'\n      },\n      clue: aClues.map((aClue, id) => {\n        return {\n          '@number': `${aClue.number}`,\n          '@word': `${id + 1}`,\n          span: he.encode(aClue.clue, {decimal: true})\n        }\n      })\n    },\n    {\n      title: {\n        b: 'Down'\n      },\n      clue: dClues.map((dClue, id) => {\n        return {\n          '@number': `${dClue.number}`,\n          '@word': `${id + aClues.length + 1}`,\n          span: he.encode(dClue.clue, {decimal: true})\n        }\n      })\n    }\n  ];\n\n  return cluesObj;\n}\n"],"sourceRoot":""}