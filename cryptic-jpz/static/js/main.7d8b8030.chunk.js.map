{"version":3,"sources":["index.js"],"names":["cx","require","_","xmlbuilder","he","cell","value","leftWall","topWall","App","initialGrid","numberGrid","Array","w","fill","initialWords","makeWordsFromGrid","initialClues","across","down","aClues","map","word","address","number","clue","isAcross","dClues","concat","makeClueList","useState","grid","setGrid","active","setActive","words","setWords","clueList","setClueList","title","creator","meta","setMeta","handleMetaInput","newMeta","disableJpz","x","includes","y","length","className","Grid","cells","onClick","i","handleClick","onInput","val","ngrid","slice","toUpperCase","handleInput","h","nWords","stripClueList","markLeftWall","disabled","markTopWall","MetaInput","onMetaInput","WordList","onClueInput","newClue","nClueList","remove","handleClueInput","href","btoa","clues","xmlObj","metadata","encode","decimal","crossword","makeGridXml","makeWordXml","makeClueXml","create","noDoubleEncoding","end","makeJPZ","download","props","rows","chunk","row","j","nx","Cell","onFocus","useFocus","inputRef","setInputFocus","type","maxLength","e","target","ref","WordItem","placeholder","n","self","index","Math","floor","north","south","west","east","undefined","acrossWords","downWords","cols","zip","rowWords","c","push","takeWhile","col","colWords","filter","makeWordsFromCells","sortBy","join","validAddresses","htmlElRef","useRef","current","focus","id","b","aClue","span","dClue","ReactDOM","render","document","getElementById"],"mappings":"kMAGMA,EAAKC,EAAQ,IACbC,EAAID,EAAQ,IACZE,EAAaF,EAAQ,IACrBG,EAAKH,EAAQ,IAIbI,EAAO,CACXC,MAAO,GACPC,UAAU,EACVC,SAAS,GAGLC,EAAM,WACV,IAAMC,EAAcC,EAAWC,MAAMC,IAAOC,KAAKT,IAE3CU,EAAeC,EAAkBN,GACjCO,EA2TR,YAAuC,IAAhBC,EAAe,EAAfA,OAAQC,EAAO,EAAPA,KACvBC,EAASF,EAAOG,KAAI,SAAAC,GACxB,MAAO,CACLC,QAAQ,GAAD,OAAKD,EAAKE,OAAV,KACPC,KAAM,GACND,OAAQF,EAAKE,OACbE,UAAU,MAGRC,EAASR,EAAKE,KAAI,SAAAC,GACtB,MAAO,CACLC,QAAQ,GAAD,OAAKD,EAAKE,OAAV,KACPC,KAAM,GACND,OAAQF,EAAKE,OACbE,UAAU,MAGd,OAAOxB,EAAE0B,OAAOR,EAAQO,GA5UHE,CAAad,GAJlB,EAMQe,mBAASpB,GANjB,mBAMTqB,EANS,KAMHC,EANG,OAOYF,mBALN,MAFN,mBAOTG,EAPS,KAODC,EAPC,OAQUJ,mBAASf,GARnB,mBAQToB,EARS,KAQFC,EARE,OASgBN,mBAASb,GATzB,mBASToB,EATS,KASCC,EATD,OAUQR,mBAAS,CAACS,MAAO,GAAIC,QAAS,KAVtC,mBAUTC,EAVS,KAUHC,EAVG,KAmDVC,EAAkB,SAACC,GACvBV,EAAU,MACVQ,EAAQ,2BAAID,GAASG,KAGjBC,EAAa,WACjB,OAAQR,EAAShB,KAAI,SAAAyB,GAAC,OAAIA,EAAErB,QAAMsB,SAAS,KAAOhB,EAAKV,KAAI,SAAA2B,GAAC,OAAIA,EAAE1C,SAAOyC,SAAS,OAC3EV,EAASY,SAAWd,EAAMjB,OAAO+B,OAASd,EAAMhB,KAAK8B,SAa9D,OACE,sBAAKC,UAAU,OAAf,UACE,gCACE,cAACC,EAAD,CACEC,MAAOrB,EACPE,OAAQA,EACRoB,QAAS,SAAAC,GAAC,OAjEE,SAACA,GACnBpB,EAAUoB,GAgEUC,CAAYD,IAC1BE,QAAS,SAACF,EAAGG,GAAJ,OA9DG,SAACxB,EAAQwB,EAAK1B,GAChC,IAAM2B,EAAQ3B,EAAK4B,QACnBD,EAAMzB,GAAN,2BAAqByB,EAAMzB,IAA3B,IAAoC3B,MAAOmD,EAAIG,gBAC/C5B,EAAQrB,EAAW+C,IACnBtB,EAASpB,EAAkB0C,IACR,IAAfD,EAAIR,QACNf,EAAUD,EAAO,GAwDQ4B,CAAYP,EAAGG,EAAK1B,IACzClB,EAvFA,EAuFMiD,EAtFN,KAwFF,wBAAQT,QAAS,kBA9CF,SAACpB,EAAQF,GAC5B,IAAM2B,EAAQ3B,EAAK4B,QACnBD,EAAMzB,GAAN,2BAAoByB,EAAMzB,IAA1B,IAAmC1B,UAAWmD,EAAMzB,GAAQ1B,WAC5DyB,EAAQrB,EAAW+C,IACnB,IAAMK,EAAS/C,EAAkB0C,GACjCtB,EAAS2B,GACTzB,EAAY0B,EAAc3B,EAAU0B,IAwCTE,CAAahC,EAAQF,IAAiBmC,SAAUjC,EAzFrE,IAyFoF,EAAtF,8BAGA,wBAAQoB,QAAS,kBA1DH,SAACpB,EAAQF,GAC3B,IAAM2B,EAAQ3B,EAAK4B,QACnBD,EAAMzB,GAAN,2BAAoByB,EAAMzB,IAA1B,IAAmCzB,SAAUkD,EAAMzB,GAAQzB,UAC3DwB,EAAQrB,EAAW+C,IACnB,IAAMK,EAAS/C,EAAkB0C,GACjCtB,EAAS2B,GACTzB,EAAY0B,EAAc3B,EAAU0B,IAoDTI,CAAYlC,EAAQF,IAAiBmC,WAAYjC,GA5FtE,GA4FF,gCAIF,gCACE,cAACmC,EAAD,CAAWC,YAAa,SAAC5B,GAAD,OAAUE,EAAgBF,MAClD,cAAC6B,EAAD,2BAAcnC,GAAd,IACEoC,YAAa,SAAC9C,GAAD,OA/CG,SAAC+C,EAASnC,GAChCH,EAAU,MACV,IAAMuC,EAAYpC,EAASsB,QAC3BzD,EAAEwE,OAAOD,EAAW,CAAC,UAAWD,EAAQjD,UACxCe,EAAY,GAAD,mBAAKmC,GAAL,CAAgBD,KA2CEG,CAAgBlD,EAAMY,OAE/C,mBACEuC,KA/BD/B,IAII,GAHD,QAAN,OAAe,kBAAf,WAA2CgC,KA0SjD,SAAiB9C,EAAMI,EAAO2C,EAAOrC,GACnC,IAAMsC,EAAS,CACb,4BAA6B,CAC3B,qBAAsB,CACpBC,SAAU,CACRzC,MAAOnC,EAAG6E,OAAOxC,EAAKF,MAAO,CAAC2C,SAAS,IACvC1C,QAASpC,EAAG6E,OAAOxC,EAAKD,QAAS,CAAC0C,SAAS,KAE7CC,UAAW,CACTpD,KAAMqD,EAAYrD,GAClBT,KAAM+D,EAAYlD,GAClB2C,MAAOQ,EAAYR,OAQ3B,OADY3E,EAAWoF,OAAOR,EAAQ,CAACS,kBAAkB,IAC9CC,MA7TyCC,CAAQ3D,EAAMI,EAAOE,EAAUI,KA+B3EkD,SAAQ,UAAKlD,EAAKF,MAAV,QAFV,SAIE,wBACA2B,SAAUrB,IADV,mCAWJM,EAAO,SAACyC,GAEZ,IAAMC,EAAO3F,EAAE4F,MAAMF,EAAMxC,MAAOwC,EAAM/E,GACxC,OACE,qBAAKqC,UAAU,OAAf,SAEI2C,EAAKxE,KAAI,SAAC0E,EAAKzC,GACb,OACE,qBAAKJ,UAAU,MAAf,SAEI6C,EAAI1E,KAAI,SAAChB,EAAM2F,GACb,IAAMC,EA/Hd,EA+HmB3C,EAAQ0C,EACnB,OAAO,cAACE,EAAD,aAELjE,OAAU2D,EAAM3D,SAAWgE,EAC3B5C,QAAW,kBAAMuC,EAAMvC,QAAQ4C,IAC/BE,QAAW,kBAAMP,EAAMvC,QAAQ4C,IAC/BzC,QAAW,SAAClD,GAAD,OAAWsF,EAAMpC,QAAQyC,EAAI3F,KACpCD,GALG4F,cAiBrBC,EAAO,SAACN,GAAW,IAAD,EACYQ,IADZ,mBACfC,EADe,KACLC,EADK,KAGtB,OADIV,EAAM3D,QAASqE,IAEjB,sBACEpD,UAAWlD,EACT,OACA4F,EAAM3D,OAAS,SAAW,KAC1B2D,EAAMrF,SAAW,WAAa,KAC9BqF,EAAMpF,QAAU,UAAY,MAE9B6C,QAAS,WAAOuC,EAAMvC,UAAWiD,KAPnC,UASE,qBAAKpD,UAAWlD,EAAG,UAAnB,SAA+B4F,EAAMpE,SACrC,uBACE0B,UAAWlD,EAAG,SACduG,KAAK,OACLC,UAAU,IACVhD,QAAS,SAAAiD,GAAC,OAAIb,EAAMpC,QAAQiD,EAAEC,OAAOpG,QACrC6F,QAASP,EAAMO,QACfQ,IAAKN,QAMP/B,EAAW,SAACsB,GAChB,OACE,gCACE,gCACE,wCAEEA,EAAM1E,OAAOG,KAAI,SAAAC,GACf,OACE,cAACsF,EAAD,2BAActF,GAAd,IACEiD,YAAa,SAACjE,GAAD,OAAWsF,EAAMrB,YAAY,CACxC9C,KAAMnB,EACNiB,QAAQ,GAAD,OAAKD,EAAKE,OAAV,KACPA,OAAQF,EAAKE,OACbE,UAAU,cAOtB,gCACE,sCAEEkE,EAAMzE,KAAKE,KAAI,SAAAC,GACb,OACE,cAACsF,EAAD,2BAActF,GAAd,IACEiD,YAAa,SAACjE,GAAD,OAAWsF,EAAMrB,YAAY,CACxC9C,KAAMnB,EACNiB,QAAQ,GAAD,OAAKD,EAAKE,OAAV,KACPA,OAAQF,EAAKE,OACbE,UAAU,cAOtB,8BAAK,8BAAIkE,EAAM1E,OAAO+B,OAAS2C,EAAMzE,KAAK8B,OAArC,kBAKLmB,EAAY,SAACwB,GACjB,OACE,gCACE,qBAAK1C,UAAU,QAAf,SACE,uBACEqD,KAAK,OACLM,YAAY,QACZrD,QAAS,SAAAiD,GAAC,OAAIb,EAAMvB,YAAY,CAAC9B,MAAOkE,EAAEC,OAAOpG,aAGrD,qBAAK4C,UAAU,UAAf,SACE,uBACEqD,KAAK,OACLM,YAAY,UACZrD,QAAS,SAAAiD,GAAC,OAAIb,EAAMvB,YAAY,CAAC7B,QAASiE,EAAEC,OAAOpG,iBAOvDsG,EAAW,SAAChB,GAChB,OACE,sBAAK1C,UAAU,WAAf,UACE,qBAAKA,UAAU,SAAf,SAAyB0C,EAAMpE,SAC/B,qBAAK0B,UAAU,OAAf,SAAuB0C,EAAMtE,OAC7B,qBAAK4B,UAAU,OAAf,SACE,uBACEqD,KAAK,OACLM,YAAY,YACZrD,QAAS,SAAAiD,GAAC,OAAIb,EAAMrB,YAAYkC,EAAEC,OAAOpG,gBAOnD,SAASK,EAAWoB,GAElB,IADA,IAAI+E,EAAI,EACCxD,EAAE,EAAGA,EAAIvB,EAAKkB,OAAQK,IAAK,CAClC,IAAMyD,EAAOhF,EAAKuB,GAElByD,EAAKC,MAAQ1D,EACbyD,EAAKjE,EAAKQ,EAjQJ,EAiQa,EACnByD,EAAK/D,EAAIiE,KAAKC,MAAM5D,EAlQd,GAkQuB,EAE7B,IAAM6D,EAAQ7D,EApQR,EAoQyB,KAAOvB,EAAKuB,EApQrC,GAqQA8D,EAAQ9D,EAAKzC,GAAY,KAAOkB,EAAKuB,EArQrC,GAsQA+D,EAAQ/D,EAtQR,IAsQkB,EAAO,KAAOvB,EAAKuB,EAAE,GACvCgE,EAAQhE,EAvQR,IAuQkBzC,EAAO,KAAOkB,EAAKuB,EAAE,GAExCyD,EAAKvG,SAAW4G,IAAUA,EAAM5G,UAAc2G,IAAUC,EAAM5G,SAGvDuG,EAAKxG,UAAY+G,IAASA,EAAK/G,WAAe8G,IAASC,EAAK/G,UAFtEwB,EAAKuB,GAAL,2BAAevB,EAAKuB,IAApB,IAAwB9B,OAAQsF,IAChCA,KAKA/E,EAAKuB,GAAL,2BAAevB,EAAKuB,IAApB,IAAwB9B,YAAQ+F,IAGpC,OAAOxF,EAGT,SAASf,EAAkBe,GACzB,IAD+B,EACzByF,EAAc,GACdC,EAAY,GACZ5B,EAAO3F,EAAE4F,MAAM/D,EAzRb,GA0RF2F,EAAOxH,EAAEyH,IAAF,MAAAzH,EAAC,YAAQ2F,IAJS,cAKfA,GALe,IAK/B,2BAAsB,CAEpB,IAFqB,IAAdE,EAAa,QACd6B,EAAW,GACRC,EAAI,EAAGA,EAAI9B,EAAI9C,OAAQ4E,IAAK,CACnC,IAAMxH,EAAO0F,EAAI8B,GACjB,GAAIxH,EAAKE,UAAkB,IAANsH,EAAS,CAC5B,IAAMvG,EAAO,GACbA,EAAKwG,KAAL,MAAAxG,EAAI,CAAMjB,GAAN,mBAAeH,EAAE6H,UAAUhC,EAAIpC,MAAMkE,EAAI,GAAI,CAAC,YAAY,OAC9DD,EAASE,KAAKxG,IAGlBkG,EAAYM,KAAZ,MAAAN,EAAoBI,IAfS,kDAiBfF,GAjBe,IAiB/B,2BAAsB,CAEpB,IAFqB,IAAdM,EAAa,QACdC,EAAW,GACRJ,EAAI,EAAGA,EAAIG,EAAI/E,OAAQ4E,IAAK,CACnC,IAAMxH,EAAO2H,EAAIH,GACjB,GAAIxH,EAAKG,SAAiB,IAANqH,EAAS,CAC3B,IAAMvG,EAAO,GACbA,EAAKwG,KAAL,MAAAxG,EAAI,CAAMjB,GAAN,mBAAeH,EAAE6H,UAAUC,EAAIrE,MAAMkE,EAAI,GAAI,CAAC,WAAW,OAC7DI,EAASH,KAAKxG,IAGlBmG,EAAUK,KAAV,MAAAL,EAAkBQ,IA3BW,8BA6B/B,MAAO,CACL/G,OAAQsG,EACLU,QAAO,SAAA5G,GAAI,OAAIA,EAAK2B,OAAS,KAC7B5B,KAAI,SAAAC,GAAI,OAAI6G,EAAmB7G,MAClCH,KAAMjB,EAAEkI,OAAOX,EACZS,QAAO,SAAA5G,GAAI,OAAIA,EAAK2B,OAAS,KAC7B5B,KAAI,SAAAC,GAAI,OAAI6G,EAAmB7G,MAChC,CAAC,YAKP,SAAS6G,EAAmB/E,GAC1B,MAAO,CACL5B,OAAQ4B,EAAM,GAAG5B,QAAU,IAC3BF,KAAM8B,EAAM/B,KAAI,SAAAhB,GAAI,OAAIA,EAAKC,MAAQD,EAAKC,MAAQ,OAAK+H,KAAK,IAC5DjF,MAAOA,EAAM/B,KAAI,kBAAa,CAACyB,EAAd,EAAEA,EAAeE,EAAjB,EAAKA,OAwB1B,SAASgB,EAAc3B,EAAvB,GAAkD,IAAhBnB,EAAe,EAAfA,OAAQC,EAAO,EAAPA,KAClCmH,EAAiBpI,EAAE0B,OACvBV,EAAOG,KAAI,SAAAC,GAAI,gBAAQA,EAAKE,OAAb,QACfL,EAAKE,KAAI,SAAAC,GAAI,gBAAQA,EAAKE,OAAb,SAEf,OAAOa,EAAS6F,QAAO,gBAAE3G,EAAF,EAAEA,QAAF,OAAe+G,EAAevF,SAASxB,MAGhE,IAAM6E,EAAW,WACf,IAAMmC,EAAYC,iBAAO,MAGzB,MAAO,CAACD,EAFS,WAAQA,EAAUE,SAAWF,EAAUE,QAAQC,WAmClE,SAAStD,EAAYrD,GAqBnB,MApBgB,CACd,UAAU,GAAV,OAzYM,IA0YN,SAAS,GAAT,OA3YM,GA4YN,oBAAqB,QACrB,YAAa,CACX,oBAAqB,SACrB,gBAAiB,QAEnB1B,KAAM0B,EAAKV,KAAI,SAAChB,EAAM2G,GACpB,MAAO,CACL,KAAK,GAAL,OAAS3G,EAAKyC,GACd,KAAK,GAAL,OAASzC,EAAK2C,GACd,YAAa3C,EAAKC,MAClB,UAAWD,EAAKmB,OAChB,YAAanB,EAAKE,SAAW,YAASgH,EACtC,WAAYlH,EAAKG,QAAU,YAAS+G,OAQ5C,SAASlC,EAAYlD,GAanB,MAZc,sBAAOA,EAAMjB,QAAb,YAAwBiB,EAAMhB,OACnBE,KAAI,SAACC,EAAMqH,GAClC,MAAO,CACL,MAAM,GAAN,OAAUA,EAAK,GACfvF,MAAO9B,EAAK8B,MAAM/B,KAAI,SAAAhB,GACpB,MAAO,CACL,KAAK,GAAL,OAASA,EAAKyC,GACd,KAAK,GAAL,OAASzC,EAAK2C,WASxB,SAASsC,EAAYR,GACnB,IAAM1D,EAASlB,EAAEkI,OAAOlI,EAAEgI,OAAOpD,EAAO,YAAa,UAC/CnD,EAASzB,EAAEkI,OAAOlI,EAAEgI,OAAOpD,EAAO,CAAC,YAAY,IAAS,UA4B9D,MA3BiB,CACf,CACEvC,MAAO,CACLqG,EAAG,UAELnH,KAAML,EAAOC,KAAI,SAACwH,EAAOF,GACvB,MAAO,CACL,UAAU,GAAV,OAAcE,EAAMrH,QACpB,QAAQ,GAAR,OAAYmH,EAAK,GACjBG,KAAM1I,EAAG6E,OAAO4D,EAAMpH,KAAM,CAACyD,SAAS,SAI5C,CACE3C,MAAO,CACLqG,EAAG,QAELnH,KAAME,EAAON,KAAI,SAAC0H,EAAOJ,GACvB,MAAO,CACL,UAAU,GAAV,OAAcI,EAAMvH,QACpB,QAAQ,GAAR,OAAYmH,EAAKvH,EAAO6B,OAAS,GACjC6F,KAAM1I,EAAG6E,OAAO8D,EAAMtH,KAAM,CAACyD,SAAS,UA/FhD8D,IAASC,OACP,cAACxI,EAAD,IACAyI,SAASC,eAAe,U","file":"static/js/main.7d8b8030.chunk.js","sourcesContent":["import React, {useState, useRef} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nconst cx = require('classnames');\nconst _ = require('lodash');\nconst xmlbuilder = require('xmlbuilder');\nconst he = require('he');\n\nconst w = 8;\nconst h = 10;\nconst cell = {\n  value: '',\n  leftWall: false,\n  topWall: false,\n}\n\nconst App = () => {\n  const initialGrid = numberGrid(Array(w * h).fill(cell));\n  const initialActive = null;\n  const initialWords = makeWordsFromGrid(initialGrid);\n  const initialClues = makeClueList(initialWords);\n\n  const [grid, setGrid] = useState(initialGrid);\n  const [active, setActive] = useState(initialActive);\n  const [words, setWords] = useState(initialWords);\n  const [clueList, setClueList] = useState(initialClues);\n  const [meta, setMeta] = useState({title: '', creator: ''});\n\n  const handleClick = (i) => {\n    setActive(i);\n  }\n\n  const handleInput = (active, val, grid) => {\n    const ngrid = grid.slice();\n    ngrid[active] = { ...ngrid[active], value: val.toUpperCase() };\n    setGrid(numberGrid(ngrid));\n    setWords(makeWordsFromGrid(ngrid));\n    if (val.length === 1) {\n      setActive(active+1);\n    }\n  }\n  \n  const markTopWall = (active, grid) => {\n    const ngrid = grid.slice();\n    ngrid[active] = {...ngrid[active], topWall: !ngrid[active].topWall};\n    setGrid(numberGrid(ngrid));\n    const nWords = makeWordsFromGrid(ngrid);\n    setWords(nWords);\n    setClueList(stripClueList(clueList, nWords));\n  }\n  \n  const markLeftWall = (active, grid) => {\n    const ngrid = grid.slice();\n    ngrid[active] = {...ngrid[active], leftWall: !ngrid[active].leftWall};\n    setGrid(numberGrid(ngrid));\n    const nWords = makeWordsFromGrid(ngrid);\n    setWords(nWords);\n    setClueList(stripClueList(clueList, nWords));\n  }\n\n  const handleClueInput = (newClue, clueList) => {\n    setActive(null);\n    const nClueList = clueList.slice();\n    _.remove(nClueList, ['address', newClue.address]);\n    setClueList([...nClueList, newClue]);\n  }\n\n  const handleMetaInput = (newMeta) => {\n    setActive(null);\n    setMeta({...meta, ...newMeta});\n  }\n  \n  const disableJpz = () => {\n    return (clueList.map(x => x.clue).includes('') || grid.map(y => y.value).includes('')) \n      || !(clueList.length === words.across.length + words.down.length);\n    // return true;\n  }\n\n  const jpzHref = () => {\n    if (!disableJpz()) {\n      return `data:${'application/xml'};base64,${btoa(makeJPZ(grid, words, clueList, meta))}`\n      // return `data:${'application/xml'},${encodeURI(mazkeJPZ(grid, words, clueList, meta))}`\n    } else {\n      return '';\n    }\n  }\n\n  return (\n    <div className='main'>\n      <div>\n        <Grid \n          cells={grid} \n          active={active}\n          onClick={i => handleClick(i)} \n          onInput={(i, val) => handleInput(i, val, grid)} \n          w={w} h={h}\n        />\n        <button onClick={() => markLeftWall(active, grid, clueList)} disabled={active % w === 0}>\n          Toggle Left Wall\n        </button>\n        <button onClick={() => markTopWall(active, grid, clueList)} disabled={!(active >= w)}>\n          Toggle Top Wall\n        </button>\n      </div>\n      <div>\n        <MetaInput onMetaInput={(meta) => handleMetaInput(meta)}/> \n        <WordList {...words} \n          onClueInput={(clue) => handleClueInput(clue, clueList)}\n        />\n        <a \n          href={jpzHref()}\n          download={`${meta.title}.jpz`}\n        >\n          <button \n          disabled={disableJpz()}\n            // onClick={console.log(JSON.stringify({ grid, words, clueList, meta}))}\n          >Download JPZ</button>\n        </a>\n      </div>\n    </div>\n  )\n}\n\n\nconst Grid = (props) => {\n  // const nCells = numberGrid(props.cells);\n  const rows = _.chunk(props.cells, props.w);\n  return (\n    <div className='grid'>\n      {\n        rows.map((row, i) => {\n          return (\n            <div className='row'>\n              {\n                row.map((cell, j) => {\n                  const nx = i * w + j;\n                  return <Cell \n                    key = {nx} \n                    active = {props.active === nx}\n                    onClick = {() => props.onClick(nx)} \n                    onFocus = {() => props.onClick(nx)}\n                    onInput = {(value) => props.onInput(nx, value)}\n                    {...cell}\n                  />\n                })\n              } \n            </div>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nconst Cell = (props) => {\n  const [inputRef, setInputFocus] = useFocus();\n  if (props.active) {setInputFocus();}\n  return (\n    <div\n      className={cx(\n        'cell',\n        props.active ? 'active' : null,\n        props.leftWall ? 'leftWall' : null, \n        props.topWall ? 'topWall' : null, \n      )}\n      onClick={() => {props.onClick(); setInputFocus();}}\n    >\n      <div className={cx('number')}>{props.number}</div>\n      <input \n        className={cx('value')}\n        type='text'\n        maxLength='1'\n        onInput={e => props.onInput(e.target.value)}\n        onFocus={props.onFocus}\n        ref={inputRef}\n      />\n    </div>\n  )\n}\n\nconst WordList = (props) => {\n  return (\n    <div>\n      <div>\n        <h3>Across</h3>\n        {\n          props.across.map(word => {\n            return (\n              <WordItem {...word} \n                onClueInput={(value) => props.onClueInput({\n                  clue: value, \n                  address: `${word.number}A`,\n                  number: word.number,\n                  isAcross: true\n                })} \n              />\n            )\n          })\n        }\n      </div>\n      <div>\n        <h3>Down</h3>\n        {\n          props.down.map(word => {\n            return (\n              <WordItem {...word} \n                onClueInput={(value) => props.onClueInput({\n                  clue: value, \n                  address: `${word.number}D`,\n                  number: word.number,\n                  isAcross: false\n                })} \n              />\n            )\n          })\n        }\n      </div>\n      <div><i>{props.across.length + props.down.length} words</i></div> \n    </div>\n  )\n}\n\nconst MetaInput = (props) => {\n  return (\n    <div>\n      <div className=\"title\">\n        <input\n          type=\"text\"\n          placeholder=\"title\"\n          onInput={e => props.onMetaInput({title: e.target.value})}\n        />\n      </div>\n      <div className=\"creator\">\n        <input\n          type=\"text\"\n          placeholder=\"Creator\"\n          onInput={e => props.onMetaInput({creator: e.target.value})}\n        />\n      </div>\n    </div>\n  )\n}\n\nconst WordItem = (props) => {\n  return (\n    <div className=\"wordItem\">\n      <div className=\"number\">{props.number}</div>\n      <div className=\"word\">{props.word}</div>\n      <div className=\"clue\">\n        <input \n          type=\"text\" \n          placeholder=\"Clue here\"\n          onInput={e => props.onClueInput(e.target.value)}\n        />\n      </div>\n    </div>\n  )\n}\n\nfunction numberGrid(grid) {\n  let n = 1;\n  for (let i=0; i < grid.length; i++) {\n    const self = grid[i];\n\n    self.index = i; \n    self.x = (i % w) + 1;\n    self.y = Math.floor(i / w) + 1;\n\n    const north = i < w          ? null : grid[i - w];\n    const south = i > (w * h-1)  ? null : grid[i + w];\n    const west = (i % w === 0)   ? null : grid[i-1];\n    const east = (i % w === w-1) ? null : grid[i+1];\n    // number the down words first\n    if ((self.topWall && south && !south.topWall) || (!north && !south.topWall)) {\n      grid[i] = { ...grid[i], number: n};\n      n++;\n    } else if ((self.leftWall && east && !east.leftWall) || (!west && !east.leftWall)) {\n      grid[i] = { ...grid[i], number: n };\n      n++;\n    } else {\n      grid[i] = { ...grid[i], number: undefined};\n    }\n  }\n  return grid;\n}\n\nfunction makeWordsFromGrid(grid) {\n  const acrossWords = [];\n  const downWords = [];\n  const rows = _.chunk(grid, w);\n  const cols = _.zip(...rows);\n  for (let row of rows) {\n    const rowWords = [];\n    for (let c = 0; c < row.length; c++) {\n      const cell = row[c];\n      if (cell.leftWall || c === 0) {\n        const word = [];\n        word.push(cell, ..._.takeWhile(row.slice(c + 1), ['leftWall', false]));\n        rowWords.push(word);\n      }\n    }\n    acrossWords.push(...rowWords);\n  }\n  for (let col of cols) {\n    const colWords = [];\n    for (let c = 0; c < col.length; c++) {\n      const cell = col[c];\n      if (cell.topWall || c === 0) {\n        const word = [];\n        word.push(cell, ..._.takeWhile(col.slice(c + 1), ['topWall', false]));\n        colWords.push(word);\n      }\n    }\n    downWords.push(...colWords);\n  }\n  return {\n    across: acrossWords\n      .filter(word => word.length > 1)\n      .map(word => makeWordsFromCells(word)),\n    down: _.sortBy(downWords\n      .filter(word => word.length > 1)\n      .map(word => makeWordsFromCells(word)),\n      ['number']\n    )\n  }\n}\n\nfunction makeWordsFromCells(cells) {\n  return {\n    number: cells[0].number || '-',\n    word: cells.map(cell => cell.value ? cell.value : '_').join(''),\n    cells: cells.map(({x, y}) => ({x, y}))\n  }\n}\n\nfunction makeClueList({across, down}) {\n  const aClues = across.map(word => {\n    return {\n      address: `${word.number}A`, \n      clue: '',\n      number: word.number,\n      isAcross: true\n    }\n  });\n  const dClues = down.map(word => {\n    return {\n      address: `${word.number}D`,\n      clue: '',\n      number: word.number,\n      isAcross: false\n    }\n  });\n  return _.concat(aClues, dClues);\n}\n\nfunction stripClueList(clueList, {across, down}) {\n  const validAddresses = _.concat(\n    across.map(word => (`${word.number}A`)),\n    down.map(word => (`${word.number}D`))\n  )\n  return clueList.filter(({address}) => validAddresses.includes(address));\n}\n\nconst useFocus = () => {\n  const htmlElRef = useRef(null)\n  const setFocus = () => { htmlElRef.current && htmlElRef.current.focus() }\n\n  return [htmlElRef, setFocus]\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n\n// make JPZ xml\n\nfunction makeJPZ(grid, words, clues, meta) {\n  const xmlObj = {\n    'crossword-compiler-applet': {\n      'rectangular-puzzle': {\n        metadata: {\n          title: he.encode(meta.title, {decimal: true}),\n          creator: he.encode(meta.creator, {decimal: true})\n        },\n        crossword: {\n          grid: makeGridXml(grid),\n          word: makeWordXml(words),\n          clues: makeClueXml(clues)\n        }\n      }\n    }\n  }\n\n  //\n  const jpz = xmlbuilder.create(xmlObj, {noDoubleEncoding: true});\n  return jpz.end();\n}\n\nfunction makeGridXml(grid) {\n  const gridObj = {\n    '@height': `${h}`,\n    '@width': `${w}`,\n    '@one-letter-words': 'false',\n    'grid-look': { \n      '@numbering-scheme': 'normal',\n      '@thick-border': 'true'\n    },\n    cell: grid.map((cell, index) => {\n      return {\n        '@x': `${cell.x}`,\n        '@y': `${cell.y}`,\n        '@solution': cell.value,\n        '@number': cell.number,\n        '@left-bar': cell.leftWall ? 'true' : undefined,\n        '@top-bar': cell.topWall ? 'true' : undefined,\n      }\n    })\n  }\n\n  return gridObj;\n}\n\nfunction makeWordXml(words) {\n  const allWords = [...words.across, ...words.down];\n  const wordObj = allWords.map((word, id) => {\n    return {\n      '@id': `${id + 1}`,\n      cells: word.cells.map(cell => {\n        return {\n          '@x': `${cell.x}`,\n          '@y': `${cell.y}`\n        }\n      })\n    }\n  });\n  return wordObj;\n}\n\n\nfunction makeClueXml(clues) {\n  const aClues = _.sortBy(_.filter(clues, 'isAcross'), 'number');\n  const dClues = _.sortBy(_.filter(clues, ['isAcross', false]), 'number');\n  const cluesObj = [\n    {\n      title: {\n        b: 'Across'\n      },\n      clue: aClues.map((aClue, id) => {\n        return {\n          '@number': `${aClue.number}`,\n          '@word': `${id + 1}`,\n          span: he.encode(aClue.clue, {decimal: true})\n        }\n      })\n    },\n    {\n      title: {\n        b: 'Down'\n      },\n      clue: dClues.map((dClue, id) => {\n        return {\n          '@number': `${dClue.number}`,\n          '@word': `${id + aClues.length + 1}`,\n          span: he.encode(dClue.clue, {decimal: true})\n        }\n      })\n    }\n  ];\n\n  return cluesObj;\n}\n"],"sourceRoot":""}